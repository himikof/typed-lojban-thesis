Реализация
-----------

Класс типов, являющихся `sumti`:

> class (Eq w, Textful w, Typeable w, FGTaggable w) => Sumti w where

Универсальный отрицательный модификатор (`cmavo` NA).

> data NA = Na deriving (Eq, Generic, Typeable)
> instance Textful NA where

Частица KU:

> data KU = Ku deriving (Eq, Generic)
> instance Textful KU where

Класс типов, являющихся `selbri`, c известной арностью:

> class (Eq t, Textful t, FGTaggable t) => Selbri t where
>   type SelbriArity t :: Nat

Простые однословные предикаты (`brivla`):

> data Brivla :: Nat -> * where
>   Brivla :: Word -> Brivla n

> deriving instance Eq (Brivla n)
> deriving instance Typeable (Brivla)
> instance Textful (Brivla n) where
>   untype (Brivla w) = TLeaf w
> instance FGTaggable (Brivla n) where
>   type FGTagged (Brivla n) = SelbriFGT n
>   withFGTagC = SelbriFGT
> instance Selbri (Brivla n) where
>   type SelbriArity (Brivla n) = n

Определение термов. Терм --- или аргумент (возможно, с тегом места),
или NA+KU (специальный терм для 'явной границы области естественного отрицания').
`TermPlacement` --- вид типов, обозначающих способ размещения аргумента.
`NaKuTerm` имеет вид размещения `TPPhantom` и не занимает слотов в предикате.
Можно заметить, что в типе `Term` отсутствует конструктор `IndexedNaKuTerm`
--- хотя это и разрешено формальной грамматикой, это бессмысленная конструкция.

> data TermPlacement = TPFixed Nat | TPAuto | TPPhantom
> data Term :: TermPlacement -> * where
>   SumtiTerm :: Sumti s => s -> Term TPAuto
>   IndexedTerm :: Sumti s => FA n -> s -> Term (TPFixed n)
>   NaKuTerm :: NA -> KU -> Term TPPhantom

> instance EqT Term where
>   SumtiTerm _ `eqT0` SumtiTerm _ = Just Refl
>   IndexedTerm tag _ `eqT0` IndexedTerm tag' _ = liftEq <$> tag `eqT0` tag'
>   NaKuTerm _ _ `eqT0` NaKuTerm _ _ = Just Refl
>   _ `eqT0` _ = Nothing
> instance Eq (Term n) where
>   SumtiTerm s == SumtiTerm s' = s `eqT` s'
>   IndexedTerm tag s == IndexedTerm tag' s' = and [tag == tag', s `eqT` s']
>   NaKuTerm na ku == NaKuTerm na' ku' = and [na == na', ku == ku']
>   _ == _ = False
> instance Textful (Term n) where
>   untype (SumtiTerm s) = untype s
>   untype (IndexedTerm tag s) = mkTNode [untype tag] [untype s] []
>   untype (NaKuTerm na ku) = mkTNode [] (liftedUntype (na, ku)) []

Определение списка термов. Вид `TermsState` определяется следующим образом 
--- в нём хранятся индекс следующего свободного слота и арность рассмотренной
части предиката. Объект типа `TermsF a b` --- это список (последовательность) термов,
стартующая в состоянии `a :: TermState` и заканчивающаяся в состоянии `b :: TermState`.
Существование такого объекта, одновременно, является доказательством существования
пути между этими состояниями.

> data TermsState = TState { nextPlaceIndex :: Nat, placeArity :: Nat }
> type TSDefault = TState 0 0

Преобразования между повышенными типами-одиночками и обычными типами, изоморфными им.

> newtype instance Sing (a :: TermsState) = STermsState (Integer, Integer)
> instance (SingI a, SingI b) => SingI (TState (a :: Nat) (b :: Nat)) where
>   sing = STermsState (fromSing (sing :: Sing a), fromSing (sing :: Sing b))
> instance SingE (KindOf (TState 0 0)) where
>   type DemoteRep (KindOf (TState 0 0)) = (Integer, Integer)
>   fromSing (STermsState s) = s
> singTermsStateEq :: Sing (a :: TermsState) -> Sing (b :: TermsState) -> Maybe (a :~: b)
> singTermsStateEq s1 s2 | fromSing s1 == fromSing s2 = Just (unsafeCoerce Refl)
>                        | otherwise = Nothing

Непосредственное определение списка термов. Списки конструируются специальными операторами
`:#:`, `:#?` и `:#|`, выполняющими вычисление (в типах) нового состояния.

> type family TPFixedTermsF (n :: Nat) (s :: TermsState) :: TermsState
> type instance TPFixedTermsF n (TState nextI arity) =
>   TState (n + 1) (Max (n + 1) arity)
> type family TPAutoTermsF (s :: TermsState) :: TermsState
> type instance TPAutoTermsF (TState nextI arity) =
>   TState (nextI + 1) (arity + 1)
> data family TermsF (s0 :: TermsState) :: TermsState -> *
> data instance TermsF s0 sx where
>   TNil :: TermsF s0 s0
>   (:#:) :: (SingI (TPFixedTermsF n s)) =>
>           Term (TPFixed n) -> TermsF s0 s
>               -> TermsF s0 (TPFixedTermsF n s)
>   (:#?) :: (SingI (TPAutoTermsF s)) =>
>           Term TPAuto -> TermsF s0 s
>               -> TermsF s0 (TPAutoTermsF s)
>   (:#|) :: (SingI s) => Term TPPhantom -> TermsF s0 s -> TermsF s0 s
> nilTerm = TNil :: TermsF TSDefault TSDefault
> infixr 5 :#:
> infixr 5 :#?
> infixr 5 :#|

Сопутствующние экземпляры для `TermsF`: сравнение и вывод.

> instance EqT (TermsF s0) where
>   TNil `eqT0` TNil = Just Refl
>   (x :#: xs) `eqT0` (y :#: ys) =
>       let
>           prove :: forall n m x y. (SingI (TPFixedTermsF n x), SingI (TPFixedTermsF m y)) =>
>               n :~: m -> x :~: y -> Maybe (TPFixedTermsF n x :~: TPFixedTermsF m y)
>           prove _ _ = (sing :: Sing (TPFixedTermsF n x)) `singTermsStateEq`
>               (sing :: Sing (TPFixedTermsF m y))
>       in do {p1 <- x `eqT0` y; p2 <- xs `eqT0` ys; prove (lower p1) p2;}
>   (_ :#? xs) `eqT0` (_ :#? ys) = (xs `eqT0` ys) >>= prove where
>       prove :: forall x y. (SingI (TPAutoTermsF x), SingI (TPAutoTermsF y)) => x :~: y
>           -> Maybe (TPAutoTermsF x :~: TPAutoTermsF y)
>       prove _ = (sing :: Sing (TPAutoTermsF x)) `singTermsStateEq`
>           (sing :: Sing (TPAutoTermsF y))
>   (_ :#| xs) `eqT0` (_ :#| ys) = xs `eqT0` ys
>   _ `eqT0` _ = Nothing
>   
> instance Eq (TermsF s0 s) where
>   TNil == TNil = True
>   (x :#: xs) == (y :#: ys) = and [x `eqT1` y, xs `eqT1` ys]
>   (x :#? xs) == (y :#? ys) = and [x == y, xs `eqT1` ys]
>   (x :#| xs) == (y :#| ys) = and [x == y, xs `eqT1` ys]

> untypeTermsF' :: TermsF s0 s -> [TextTree]
> untypeTermsF' TNil = []
> untypeTermsF' (x :#: xs) = untype x : untypeTermsF' xs
> untypeTermsF' (x :#? xs) = untype x : untypeTermsF' xs
> untypeTermsF' (x :#| xs) = untype x : untypeTermsF' xs
> instance Textful (TermsF s0 s) where
>   untype xs = mkTNode (untypeTermsF' xs) [] []

Хвосты высказываний (англ. `bridi`-tails) представляют собой
расходящиеся части логически объединённого сложного высказывания.
Например, `mi klama le zarci .ije mi nelci la djan.` эквивалентно
`mi klama le zarci gi'e nelci la djan.`. Структура параметров типа аналогична
`TermsF`.

> data family BridiTailF (s :: TermsState) :: TermsState -> *
> data instance BridiTailF s0 sx where
>   SelbriBT :: (Selbri s, arity <= SelbriArity s) => s -> TermsF s0 (TState ni arity)
>       -> BridiTailF s0 (TState ni arity)
> instance Textful (BridiTailF s0 s) where
>   untype (SelbriBT s ts) = mkTNode [] [untype s] [untype ts]

Тип высказывания:

> data Bridi' :: Nat -> * where
>   Bridi' :: TermsF TSDefault s0 -> BridiTailF s0 (TState ni arity) -> Bridi' arity
> instance Textful (Bridi' arity) where
>   untype (Bridi' prefix tail) = mkTNode [untype prefix] [untype tail] []

Функции для создания простых высказываний:

> bridi1 :: (SelbriArity s ~ 1, Selbri s, Sumti x1)
>     => s -> x1 -> Bridi' 1
> bridi1 s x1 = Bridi' (SumtiTerm x1 :#? TNil) $ SelbriBT s TNil
> bridi2 :: (SelbriArity s ~ 2, Selbri s, Sumti x1, Sumti x2)
>     => s -> x1 -> x2 -> Bridi' 2
> bridi2 s x1 x2 = Bridi' (SumtiTerm x1 :#? TNil) $ SelbriBT s (SumtiTerm x2 :#? TNil)
> bridi3 :: (SelbriArity s ~ 3, Selbri s, Sumti x1, Sumti x2, Sumti x3)
>     => s -> x1 -> x2 -> x3 -> Bridi' 3
> bridi3 s x1 x2 x3 = Bridi' (SumtiTerm x1 :#? TNil) $ SelbriBT s
>   (SumtiTerm x2 :#? SumtiTerm x3 :#? TNil)
> bridi4 :: (SelbriArity s ~ 4, Selbri s, Sumti x1, Sumti x2, Sumti x3, Sumti x4)
>     => s -> x1 -> x2 -> x3 -> x4 -> Bridi' 4
> bridi4 s x1 x2 x3 x4 = Bridi' (SumtiTerm x1 :#? TNil) $ SelbriBT s
>   (SumtiTerm x2 :#? SumtiTerm x3 :#? SumtiTerm x4 :#? TNil)

Теги индексов слотов (FA):

> data FA :: Nat -> * where
>   Fa :: FA 0
>   Fe :: FA 1
>   Fi :: FA 2
>   Fo :: FA 3
>   Fu :: FA 4
> instance EqT FA where
>   Fa `eqT0` Fa = Just Refl
>   Fe `eqT0` Fe = Just Refl
>   Fi `eqT0` Fi = Just Refl
>   Fo `eqT0` Fo = Just Refl
>   Fu `eqT0` Fu = Just Refl
>   _ `eqT0` _ = Nothing
> deriving instance Eq (FA n)
> deriving instance Show (FA n)

> instance Textful (FA n) where
>   untype Fa = TLeaf "Fa"
>   untype Fe = TLeaf "Fe"
>   untype Fi = TLeaf "Fi"
>   untype Fo = TLeaf "Fo"
>   untype Fu = TLeaf "Fu"
> tagIndex :: forall n. SingI n => FA n -> Int
> tagIndex _ = fromInteger $ fromSing (sing :: Sing n)

Служебная частица CU (разделитель префикса высказывания и предиката):

> data CU = Cu deriving (Eq, Generic)
> instance Textful CU where

Функтор для несущественных частиц:

> type Elidable = Maybe
> instance Textful t => Textful (Elidable t) where
>   untype = maybe emptyTNode untype

Определение `tanru` --- сложных комбинированных предикатов.
Операторы:

 - ``Selbri `tanruApp` Selbri``: пишется как "Selbri Selbri", приоритет 6, левоассоциативный
 - ``Selbri `bo` Selbri``: приоритет 9, правоассоциативный
 - ``ke [Selbri]``: пишется как "ke Selbri Selbri ... Selbri [ke'e]", скобки
 - ``Selbri `co` Selbri``: инверсия порядка, приоритет 5, правоассоциативный, разбивает ke...ke'e

> data KeState = HasKEAndKEhE | HasKE | HasNone

Частицы KE and KEhE:

> data KE = Ke deriving (Eq, Generic)
> instance Textful KE where
> data KEhE = Ke'e deriving (Eq, Generic)
> instance Textful KEhE where

> data TanruOpCtx = TanruOpCtx { keState :: KeState }
> defaultTC :: TanruOpCtx
> defaultTC = TanruOpCtx { keState = HasNone }

> mkKe :: TanruOpCtx -> Elidable KE
> mkKe c = case keState c of
>   HasNone -> Nothing
>   _       -> Just Ke
> mkKe'e :: TanruOpCtx -> Elidable KEhE
> mkKe'e c = case keState c of
>   HasKEAndKEhE -> Just Ke'e
>   _            -> Nothing

Оператор, образующий `tanru`:

> class (Eq w, Textful w, Typeable w) => TanruOp w where
>   untypeArgsOrdered :: (Selbri m l, Selbri n r) => w -> l -> r -> (TextTree, TextTree)
>   untypeArgsOrdered _ l r = (untype l, untype r)

> data TanruApp = TanruApp deriving (Eq, Typeable)
> instance Textful TanruApp where
>   untype = const emptyTNode
> instance TanruOp TanruApp where

> data BO = Bo deriving (Eq, Generic, Typeable)
> instance Textful BO where
> instance TanruOp BO where

> data CO = Co deriving (Eq, Generic, Typeable)
> instance Textful CO where
> instance TanruOp CO where
>   untypeArgsOrdered _ l r = (untype r, untype l)

Определение непосредственно самого типа для `tanru`:

> data Tanru :: Nat -> * where
>   Tanru :: (TanruOp op, Selbri l, Selbri r, SelbriArity r ~ n) =>
>       op -> TanruOpCtx -> l -> r -> Tanru n

> instance (Typeable n) => Selbri (Tanru n) where
>   type SelbriArity (Tanru n) = n
> instance Textful (Tanru n) where
>   untype (Tanru op c l r) = mkTNode [untype $ mkKe c, ul] [untype op]
>                                     [ur, untype $ mkKe'e c] where
>       (ul, ur) = untypeArgsOrdered op l r
> instance Eq (Tanru n) where 
>   Tanru op _ l r == Tanru op' _ l' r' = and [op `eqT` op', l `eqT` l', r `eqT` r']
> instance Typeable n => FGTaggable (Tanru n) where
>   type FGTagged (Tanru n) = SelbriFGT n
>   withFGTagC = SelbriFGT

> modifyTanruOpCtx :: (TanruOpCtx -> TanruOpCtx) -> Tanru n -> Tanru n
> modifyTanruOpCtx f (Tanru op c l r) = Tanru op (f c) l r

> infixl 6 `tanruApp`
> tanruApp :: (Selbri m l, Selbri n r) => l -> r -> Tanru n
> l `tanruApp` r = Tanru TanruApp defaultTC l r
> infixr 9 `bo`
> bo :: (Selbri m l, Selbri n r) => l -> r -> Tanru n
> l `bo` r = Tanru Bo defaultTC l r
> infixr 5 `co`
> co :: (Selbri m l, Selbri n r) => r -> l -> Tanru n
> r `co` l = Tanru Co defaultTC l r

> updateKeState :: KeState -> Tanru n -> Tanru n
> updateKeState s = modifyTanruOpCtx (\c -> c {keState = s})
> ke :: Tanru n -> Tanru n
> ke = updateKeState HasKE
> keKe'e :: Tanru n -> Tanru n
> keKe'e = updateKeState HasKEAndKEhE

Дескрипторы (артикли) --- преобразование предикатов в аргументы.

> data LESumtiCtx = LESumtiCtx { hasKu :: Bool }
> defaultLEC :: LESumtiCtx
> defaultLEC = LESumtiCtx { hasKu = False }
> mkKu :: LESumtiCtx -> Elidable KU
> mkKu c = if hasKu c then Just Ku else Nothing

> data LE = Lo deriving (Eq, Generic, Typeable)
> instance Textful LE where

> data LESumti where
>   LESumti :: (Selbri n s) => LE -> LESumtiCtx -> s -> LESumti
> deriving instance (Typeable LESumti)
> instance Eq LESumti where
>   LESumti d _ s == LESumti d' _ s' = and [d == d', s `eqT` s']
> instance Textful LESumti where
>   untype (LESumti d c s) = mkTNode [] [untype d] $ liftedUntype (s, mkKu c)
> instance FGTaggable LESumti where
>   type FGTagged LESumti = SumtiFGT
>   withFGTagC = SumtiFGT
> instance Sumti LESumti where

> lo :: (Selbri n s) => s -> LESumti
> lo = LESumti Lo defaultLEC
> loKu :: (Selbri n s) => s -> LESumti
> loKu = LESumti Lo defaultLEC { hasKu = True }

Грамматически свободные теги: эмоции и т.д.

> class (Eq t, Typeable t, Textful t) => FreeGrammarTag t where

> class FGTaggable w where
>   type FGTagged w :: *
>   withFGTagC :: (FreeGrammarTag t) => t -> FGTransCtx -> w -> FGTagged w
>   withFGTag :: (FreeGrammarTag t) => t -> w -> FGTagged w
>   withFGTag t = withFGTagC t defaultFGTC

> data FGTransCtx = FGTransCtx { suffixPosition :: Bool }
> defaultFGTC :: FGTransCtx
> defaultFGTC = FGTransCtx { suffixPosition = False }

> defaultFreeGrammarUntype :: (Textful w, FreeGrammarTag t) => 
>                             t -> FGTransCtx -> w -> TextTree
> defaultFreeGrammarUntype t c w = 
>   mkTNode' $ if suffixPosition c
>              then ([untype w], [untype t], [])
>              else case untype w of
>                        su@(TLeaf _) -> ([su], [untype t], [])
>                        TNode l c r -> (l, c ++ [untype t], r)

> data SumtiFGT where
>   SumtiFGT :: (Sumti s, FreeGrammarTag t) => t -> FGTransCtx -> s -> SumtiFGT
> instance Eq SumtiFGT where
>   SumtiFGT t _ s == SumtiFGT t' _ s' = and [t `eqT` t', s `eqT` s']
> instance Textful SumtiFGT where
>   untype (SumtiFGT t c s) = defaultFreeGrammarUntype t c s
> instance FGTaggable SumtiFGT where
>   type FGTagged SumtiFGT = SumtiFGT
>   withFGTagC = SumtiFGT
> instance Sumti SumtiFGT where

> data SelbriFGT :: Nat -> * where
>   SelbriFGT :: (Selbri s, SelbriArity s ~ n, FreeGrammarTag t) =>
>       t -> FGTransCtx -> s -> SelbriFGT n
> instance Eq (SelbriFGT n) where
>   SelbriFGT t _ s == SelbriFGT t' _ s' = and [t `eqT` t', s `eqT` s']
> instance Textful (SelbriFGT n) where
>   untype (SelbriFGT t c s) = defaultFreeGrammarUntype t c s
> instance FGTaggable (SelbriFGT n) where
>   type FGTagged (SelbriFGT n) = SelbriFGT n
>   withFGTagC = SelbriFGT
> instance Selbri (SelbriFGT n) where
>   type SelbriArity (SelbriFGT n) = n

