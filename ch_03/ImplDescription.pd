Основные идеи
-------------

В качестве (мета-)языка для выражения языка Ложбан был выбран
язык Haskell[@haskell]. Важно заметить, что Haskell --- не
один язык, а семейство языков, разные аспекты (возможности) которых 
настраиваются расширениями языка, причём языки с разными множествами
опций могут очень сильно отличаться по выразительной мощности. Поэтому
одной из целей работы было нахождение и обоснование разумного множества
расширений, дающих систему типов достаточной выразительности.

### GADT и фантомные типы ###

Использование обобщённых алгебраических типов данных (*англ.* GADTs) вместе с фантомными
типами для представления[@tt:Washburn03boxesgo] AST на языке Haskell является широко известой техникой.
В данной работе в фантомных типах узлов дерева хранится информация, позволяющая проверять некоторые семантические
условия в AST.

### Доказательства на уровне типов ###

В основе идеи представления доказательств внутри системы типов лежит
соответствие Карри — Ховарда[@tt:sørensen2006lectures], связывающее
истинность высказываний некоторых логик с населённостью типов в
соответствующих системах типов. В частности, это позволяет доказывать
логические теоремы написанием корректной функции, имеющей тип,
соответствующий формулировке теоремы.

### Вычисления на уровне типов ###

Для написания функций, принимающих типы на вход,
используется расширение `TypeFamilies` --- семейства типов[@tt:Kiselyov10funwith][@tt:Chakravarty:2005:ATC:1047659.1040306].
Это позволяет относительно легко объявлять функции на типах, преобразующие соответствующим образом хранимое состояние.
Также в этом помогает синтаксическое расширение `TypeOperators`, позволяющее объявлять на типах произвольные инфиксные операторы.

### Виды типов и полиморфизм по видам ###

Вид типа (*англ.* kind) --- это тип типов, т.е. некоторое множество типов. Все обычные типы принадлежат к виду `*`, обычные унарные конструкторы
типов к виду \lstinline$* -> *$ и так далее.
Использование расширений `KindSignatures` и `DataKinds` позволяет вводить новые виды путём повышения[@tt:Yorgey:2012:GHP:2103786.2103795] обычных типов до видов типов,
а населяющих их значений до типов, населяющих вид. В частности, это позволяет повысить натуральные числа до типов вида `Nat`, и не выполнять ручного кодирования
через аксиомы Пеано.
Расширение `PolyKinds`[@tt:Yorgey:2012:GHP:2103786.2103795], добавляющее полиморфизм по видам, позволяет, в свою очередь, сформулировать некоторые свойства для
всех видов сразу. Это упрощает, например, определение операции сравнения на типах.

